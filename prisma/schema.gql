# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
	count: Int!
}

type AggregateDrink {
	_count: DrinkCountAggregate
	_max: DrinkMaxAggregate
	_min: DrinkMinAggregate
}

type AggregateIngredient {
	_count: IngredientCountAggregate
	_max: IngredientMaxAggregate
	_min: IngredientMinAggregate
}

type AggregateIngredientMeasure {
	_count: IngredientMeasureCountAggregate
	_max: IngredientMeasureMaxAggregate
	_min: IngredientMeasureMinAggregate
}

type AggregateSpirit {
	_avg: SpiritAvgAggregate
	_count: SpiritCountAggregate
	_max: SpiritMaxAggregate
	_min: SpiritMinAggregate
	_sum: SpiritSumAggregate
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
	set: DateTime
}

input DateTimeFilter {
	equals: DateTime
	gt: DateTime
	gte: DateTime
	in: [DateTime!]
	lt: DateTime
	lte: DateTime
	not: NestedDateTimeFilter
	notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedDateTimeFilter
	_min: NestedDateTimeFilter
	equals: DateTime
	gt: DateTime
	gte: DateTime
	in: [DateTime!]
	lt: DateTime
	lte: DateTime
	not: NestedDateTimeWithAggregatesFilter
	notIn: [DateTime!]
}

type Drink {
	_count: DrinkCount
	alcoholic: String!
	category: [String!]!
	dateModified: DateTime!
	glass: String!
	IBA: String
	id: String!
	image: String
	ingredients(
		cursor: IngredientMeasureWhereUniqueInput
		distinct: [IngredientMeasureScalarFieldEnum!]
		orderBy: [IngredientMeasureOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): [IngredientMeasure!]!
	instructions: String!
	name: String
	tags: [String!]!
}

type DrinkCount {
	ingredients: Int!
}

type DrinkCountAggregate {
	_all: Int!
	alcoholic: Int!
	category: Int!
	dateModified: Int!
	glass: Int!
	IBA: Int!
	id: Int!
	image: Int!
	instructions: Int!
	name: Int!
	tags: Int!
}

input DrinkCountOrderByAggregateInput {
	alcoholic: SortOrder
	category: SortOrder
	dateModified: SortOrder
	glass: SortOrder
	IBA: SortOrder
	id: SortOrder
	image: SortOrder
	instructions: SortOrder
	name: SortOrder
	tags: SortOrder
}

input DrinkCreatecategoryInput {
	set: [String!]!
}

input DrinkCreateInput {
	alcoholic: String
	category: DrinkCreatecategoryInput
	dateModified: DateTime
	glass: String!
	IBA: String
	id: String
	image: String
	ingredients: IngredientMeasureCreateNestedManyWithoutDrinkInput
	instructions: String!
	name: String
	tags: DrinkCreatetagsInput
}

input DrinkCreateManyInput {
	alcoholic: String
	category: DrinkCreatecategoryInput
	dateModified: DateTime
	glass: String!
	IBA: String
	id: String
	image: String
	instructions: String!
	name: String
	tags: DrinkCreatetagsInput
}

input DrinkCreateNestedOneWithoutIngredientsInput {
	connect: DrinkWhereUniqueInput
	connectOrCreate: DrinkCreateOrConnectWithoutIngredientsInput
	create: DrinkCreateWithoutIngredientsInput
}

input DrinkCreateOrConnectWithoutIngredientsInput {
	create: DrinkCreateWithoutIngredientsInput!
	where: DrinkWhereUniqueInput!
}

input DrinkCreatetagsInput {
	set: [String!]!
}

input DrinkCreateWithoutIngredientsInput {
	alcoholic: String
	category: DrinkCreatecategoryInput
	dateModified: DateTime
	glass: String!
	IBA: String
	id: String
	image: String
	instructions: String!
	name: String
	tags: DrinkCreatetagsInput
}

type DrinkGroupBy {
	_count: DrinkCountAggregate
	_max: DrinkMaxAggregate
	_min: DrinkMinAggregate
	alcoholic: String!
	category: [String!]
	dateModified: DateTime!
	glass: String!
	IBA: String
	id: String!
	image: String
	instructions: String!
	name: String
	tags: [String!]
}

type DrinkMaxAggregate {
	alcoholic: String
	dateModified: DateTime
	glass: String
	IBA: String
	id: String
	image: String
	instructions: String
	name: String
}

input DrinkMaxOrderByAggregateInput {
	alcoholic: SortOrder
	dateModified: SortOrder
	glass: SortOrder
	IBA: SortOrder
	id: SortOrder
	image: SortOrder
	instructions: SortOrder
	name: SortOrder
}

type DrinkMinAggregate {
	alcoholic: String
	dateModified: DateTime
	glass: String
	IBA: String
	id: String
	image: String
	instructions: String
	name: String
}

input DrinkMinOrderByAggregateInput {
	alcoholic: SortOrder
	dateModified: SortOrder
	glass: SortOrder
	IBA: SortOrder
	id: SortOrder
	image: SortOrder
	instructions: SortOrder
	name: SortOrder
}

input DrinkOrderByWithAggregationInput {
	_count: DrinkCountOrderByAggregateInput
	_max: DrinkMaxOrderByAggregateInput
	_min: DrinkMinOrderByAggregateInput
	alcoholic: SortOrder
	category: SortOrder
	dateModified: SortOrder
	glass: SortOrder
	IBA: SortOrder
	id: SortOrder
	image: SortOrder
	instructions: SortOrder
	name: SortOrder
	tags: SortOrder
}

input DrinkOrderByWithRelationInput {
	alcoholic: SortOrder
	category: SortOrder
	dateModified: SortOrder
	glass: SortOrder
	IBA: SortOrder
	id: SortOrder
	image: SortOrder
	ingredients: IngredientMeasureOrderByRelationAggregateInput
	instructions: SortOrder
	name: SortOrder
	tags: SortOrder
}

input DrinkRelationFilter {
	is: DrinkWhereInput
	isNot: DrinkWhereInput
}

enum DrinkScalarFieldEnum {
	alcoholic
	category
	dateModified
	glass
	IBA
	id
	image
	instructions
	name
	tags
}

input DrinkScalarWhereWithAggregatesInput {
	alcoholic: StringWithAggregatesFilter
	AND: [DrinkScalarWhereWithAggregatesInput!]
	category: StringNullableListFilter
	dateModified: DateTimeWithAggregatesFilter
	glass: StringWithAggregatesFilter
	IBA: StringNullableWithAggregatesFilter
	id: StringWithAggregatesFilter
	image: StringNullableWithAggregatesFilter
	instructions: StringWithAggregatesFilter
	name: StringNullableWithAggregatesFilter
	NOT: [DrinkScalarWhereWithAggregatesInput!]
	OR: [DrinkScalarWhereWithAggregatesInput!]
	tags: StringNullableListFilter
}

input DrinkUpdatecategoryInput {
	push: [String!]
	set: [String!]
}

input DrinkUpdateInput {
	alcoholic: StringFieldUpdateOperationsInput
	category: DrinkUpdatecategoryInput
	dateModified: DateTimeFieldUpdateOperationsInput
	glass: StringFieldUpdateOperationsInput
	IBA: NullableStringFieldUpdateOperationsInput
	image: NullableStringFieldUpdateOperationsInput
	ingredients: IngredientMeasureUpdateManyWithoutDrinkInput
	instructions: StringFieldUpdateOperationsInput
	name: NullableStringFieldUpdateOperationsInput
	tags: DrinkUpdatetagsInput
}

input DrinkUpdateManyMutationInput {
	alcoholic: StringFieldUpdateOperationsInput
	category: DrinkUpdatecategoryInput
	dateModified: DateTimeFieldUpdateOperationsInput
	glass: StringFieldUpdateOperationsInput
	IBA: NullableStringFieldUpdateOperationsInput
	image: NullableStringFieldUpdateOperationsInput
	instructions: StringFieldUpdateOperationsInput
	name: NullableStringFieldUpdateOperationsInput
	tags: DrinkUpdatetagsInput
}

input DrinkUpdateOneWithoutIngredientsInput {
	connect: DrinkWhereUniqueInput
	connectOrCreate: DrinkCreateOrConnectWithoutIngredientsInput
	create: DrinkCreateWithoutIngredientsInput
	delete: Boolean
	disconnect: Boolean
	update: DrinkUpdateWithoutIngredientsInput
	upsert: DrinkUpsertWithoutIngredientsInput
}

input DrinkUpdatetagsInput {
	push: [String!]
	set: [String!]
}

input DrinkUpdateWithoutIngredientsInput {
	alcoholic: StringFieldUpdateOperationsInput
	category: DrinkUpdatecategoryInput
	dateModified: DateTimeFieldUpdateOperationsInput
	glass: StringFieldUpdateOperationsInput
	IBA: NullableStringFieldUpdateOperationsInput
	image: NullableStringFieldUpdateOperationsInput
	instructions: StringFieldUpdateOperationsInput
	name: NullableStringFieldUpdateOperationsInput
	tags: DrinkUpdatetagsInput
}

input DrinkUpsertWithoutIngredientsInput {
	create: DrinkCreateWithoutIngredientsInput!
	update: DrinkUpdateWithoutIngredientsInput!
}

input DrinkWhereInput {
	alcoholic: StringFilter
	AND: [DrinkWhereInput!]
	category: StringNullableListFilter
	dateModified: DateTimeFilter
	glass: StringFilter
	IBA: StringNullableFilter
	id: StringFilter
	image: StringNullableFilter
	ingredients: IngredientMeasureListRelationFilter
	instructions: StringFilter
	name: StringNullableFilter
	NOT: [DrinkWhereInput!]
	OR: [DrinkWhereInput!]
	tags: StringNullableListFilter
}

input DrinkWhereUniqueInput {
	id: String
}

input EnumSpiritTypeFieldUpdateOperationsInput {
	set: SpiritType
}

input EnumSpiritTypeFilter {
	equals: SpiritType
	in: [SpiritType!]
	not: NestedEnumSpiritTypeFilter
	notIn: [SpiritType!]
}

input EnumSpiritTypeWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedEnumSpiritTypeFilter
	_min: NestedEnumSpiritTypeFilter
	equals: SpiritType
	in: [SpiritType!]
	not: NestedEnumSpiritTypeWithAggregatesFilter
	notIn: [SpiritType!]
}

input FloatFieldUpdateOperationsInput {
	decrement: Float
	divide: Float
	increment: Float
	multiply: Float
	set: Float
}

input FloatFilter {
	equals: Float
	gt: Float
	gte: Float
	in: [Float!]
	lt: Float
	lte: Float
	not: NestedFloatFilter
	notIn: [Float!]
}

input FloatWithAggregatesFilter {
	_avg: NestedFloatFilter
	_count: NestedIntFilter
	_max: NestedFloatFilter
	_min: NestedFloatFilter
	_sum: NestedFloatFilter
	equals: Float
	gt: Float
	gte: Float
	in: [Float!]
	lt: Float
	lte: Float
	not: NestedFloatWithAggregatesFilter
	notIn: [Float!]
}

type Ingredient {
	_count: IngredientCount
	id: String!
	IngredientMeasure(
		cursor: IngredientMeasureWhereUniqueInput
		distinct: [IngredientMeasureScalarFieldEnum!]
		orderBy: [IngredientMeasureOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): [IngredientMeasure!]!
	name: String!
	spirit: Spirit
	spiritId: String
	type: String!
}

type IngredientCount {
	IngredientMeasure: Int!
}

type IngredientCountAggregate {
	_all: Int!
	id: Int!
	name: Int!
	spiritId: Int!
	type: Int!
}

input IngredientCountOrderByAggregateInput {
	id: SortOrder
	name: SortOrder
	spiritId: SortOrder
	type: SortOrder
}

input IngredientCreateInput {
	id: String
	IngredientMeasure: IngredientMeasureCreateNestedManyWithoutIngredientInput
	name: String!
	spirit: SpiritCreateNestedOneWithoutIngredientInput
	type: String!
}

input IngredientCreateManyInput {
	id: String
	name: String!
	spiritId: String
	type: String!
}

input IngredientCreateManySpiritInput {
	id: String
	name: String!
	type: String!
}

input IngredientCreateManySpiritInputEnvelope {
	data: [IngredientCreateManySpiritInput!]!
}

input IngredientCreateNestedManyWithoutSpiritInput {
	connect: [IngredientWhereUniqueInput!]
	connectOrCreate: [IngredientCreateOrConnectWithoutSpiritInput!]
	create: [IngredientCreateWithoutSpiritInput!]
	createMany: IngredientCreateManySpiritInputEnvelope
}

input IngredientCreateNestedOneWithoutIngredientMeasureInput {
	connect: IngredientWhereUniqueInput
	connectOrCreate: IngredientCreateOrConnectWithoutIngredientMeasureInput
	create: IngredientCreateWithoutIngredientMeasureInput
}

input IngredientCreateOrConnectWithoutIngredientMeasureInput {
	create: IngredientCreateWithoutIngredientMeasureInput!
	where: IngredientWhereUniqueInput!
}

input IngredientCreateOrConnectWithoutSpiritInput {
	create: IngredientCreateWithoutSpiritInput!
	where: IngredientWhereUniqueInput!
}

input IngredientCreateWithoutIngredientMeasureInput {
	id: String
	name: String!
	spirit: SpiritCreateNestedOneWithoutIngredientInput
	type: String!
}

input IngredientCreateWithoutSpiritInput {
	id: String
	IngredientMeasure: IngredientMeasureCreateNestedManyWithoutIngredientInput
	name: String!
	type: String!
}

type IngredientGroupBy {
	_count: IngredientCountAggregate
	_max: IngredientMaxAggregate
	_min: IngredientMinAggregate
	id: String!
	name: String!
	spiritId: String
	type: String!
}

input IngredientListRelationFilter {
	every: IngredientWhereInput
	none: IngredientWhereInput
	some: IngredientWhereInput
}

type IngredientMaxAggregate {
	id: String
	name: String
	spiritId: String
	type: String
}

input IngredientMaxOrderByAggregateInput {
	id: SortOrder
	name: SortOrder
	spiritId: SortOrder
	type: SortOrder
}

type IngredientMeasure {
	Drink: Drink
	drinkId: String
	id: String!
	ingredient: Ingredient
	ingredientId: String
	measure: String
}

type IngredientMeasureCountAggregate {
	_all: Int!
	drinkId: Int!
	id: Int!
	ingredientId: Int!
	measure: Int!
}

input IngredientMeasureCountOrderByAggregateInput {
	drinkId: SortOrder
	id: SortOrder
	ingredientId: SortOrder
	measure: SortOrder
}

input IngredientMeasureCreateInput {
	Drink: DrinkCreateNestedOneWithoutIngredientsInput
	id: String
	ingredient: IngredientCreateNestedOneWithoutIngredientMeasureInput
	measure: String
}

input IngredientMeasureCreateManyDrinkInput {
	id: String
	ingredientId: String
	measure: String
}

input IngredientMeasureCreateManyDrinkInputEnvelope {
	data: [IngredientMeasureCreateManyDrinkInput!]!
}

input IngredientMeasureCreateManyIngredientInput {
	drinkId: String
	id: String
	measure: String
}

input IngredientMeasureCreateManyIngredientInputEnvelope {
	data: [IngredientMeasureCreateManyIngredientInput!]!
}

input IngredientMeasureCreateManyInput {
	drinkId: String
	id: String
	ingredientId: String
	measure: String
}

input IngredientMeasureCreateNestedManyWithoutDrinkInput {
	connect: [IngredientMeasureWhereUniqueInput!]
	connectOrCreate: [IngredientMeasureCreateOrConnectWithoutDrinkInput!]
	create: [IngredientMeasureCreateWithoutDrinkInput!]
	createMany: IngredientMeasureCreateManyDrinkInputEnvelope
}

input IngredientMeasureCreateNestedManyWithoutIngredientInput {
	connect: [IngredientMeasureWhereUniqueInput!]
	connectOrCreate: [IngredientMeasureCreateOrConnectWithoutIngredientInput!]
	create: [IngredientMeasureCreateWithoutIngredientInput!]
	createMany: IngredientMeasureCreateManyIngredientInputEnvelope
}

input IngredientMeasureCreateOrConnectWithoutDrinkInput {
	create: IngredientMeasureCreateWithoutDrinkInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureCreateOrConnectWithoutIngredientInput {
	create: IngredientMeasureCreateWithoutIngredientInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureCreateWithoutDrinkInput {
	id: String
	ingredient: IngredientCreateNestedOneWithoutIngredientMeasureInput
	measure: String
}

input IngredientMeasureCreateWithoutIngredientInput {
	Drink: DrinkCreateNestedOneWithoutIngredientsInput
	id: String
	measure: String
}

type IngredientMeasureGroupBy {
	_count: IngredientMeasureCountAggregate
	_max: IngredientMeasureMaxAggregate
	_min: IngredientMeasureMinAggregate
	drinkId: String
	id: String!
	ingredientId: String
	measure: String
}

input IngredientMeasureListRelationFilter {
	every: IngredientMeasureWhereInput
	none: IngredientMeasureWhereInput
	some: IngredientMeasureWhereInput
}

type IngredientMeasureMaxAggregate {
	drinkId: String
	id: String
	ingredientId: String
	measure: String
}

input IngredientMeasureMaxOrderByAggregateInput {
	drinkId: SortOrder
	id: SortOrder
	ingredientId: SortOrder
	measure: SortOrder
}

type IngredientMeasureMinAggregate {
	drinkId: String
	id: String
	ingredientId: String
	measure: String
}

input IngredientMeasureMinOrderByAggregateInput {
	drinkId: SortOrder
	id: SortOrder
	ingredientId: SortOrder
	measure: SortOrder
}

input IngredientMeasureOrderByRelationAggregateInput {
	_count: SortOrder
}

input IngredientMeasureOrderByWithAggregationInput {
	_count: IngredientMeasureCountOrderByAggregateInput
	_max: IngredientMeasureMaxOrderByAggregateInput
	_min: IngredientMeasureMinOrderByAggregateInput
	drinkId: SortOrder
	id: SortOrder
	ingredientId: SortOrder
	measure: SortOrder
}

input IngredientMeasureOrderByWithRelationInput {
	Drink: DrinkOrderByWithRelationInput
	drinkId: SortOrder
	id: SortOrder
	ingredient: IngredientOrderByWithRelationInput
	ingredientId: SortOrder
	measure: SortOrder
}

enum IngredientMeasureScalarFieldEnum {
	drinkId
	id
	ingredientId
	measure
}

input IngredientMeasureScalarWhereInput {
	AND: [IngredientMeasureScalarWhereInput!]
	drinkId: StringNullableFilter
	id: StringFilter
	ingredientId: StringNullableFilter
	measure: StringNullableFilter
	NOT: [IngredientMeasureScalarWhereInput!]
	OR: [IngredientMeasureScalarWhereInput!]
}

input IngredientMeasureScalarWhereWithAggregatesInput {
	AND: [IngredientMeasureScalarWhereWithAggregatesInput!]
	drinkId: StringNullableWithAggregatesFilter
	id: StringWithAggregatesFilter
	ingredientId: StringNullableWithAggregatesFilter
	measure: StringNullableWithAggregatesFilter
	NOT: [IngredientMeasureScalarWhereWithAggregatesInput!]
	OR: [IngredientMeasureScalarWhereWithAggregatesInput!]
}

input IngredientMeasureUpdateInput {
	Drink: DrinkUpdateOneWithoutIngredientsInput
	ingredient: IngredientUpdateOneWithoutIngredientMeasureInput
	measure: NullableStringFieldUpdateOperationsInput
}

input IngredientMeasureUpdateManyMutationInput {
	measure: NullableStringFieldUpdateOperationsInput
}

input IngredientMeasureUpdateManyWithoutDrinkInput {
	connect: [IngredientMeasureWhereUniqueInput!]
	connectOrCreate: [IngredientMeasureCreateOrConnectWithoutDrinkInput!]
	create: [IngredientMeasureCreateWithoutDrinkInput!]
	createMany: IngredientMeasureCreateManyDrinkInputEnvelope
	delete: [IngredientMeasureWhereUniqueInput!]
	deleteMany: [IngredientMeasureScalarWhereInput!]
	disconnect: [IngredientMeasureWhereUniqueInput!]
	set: [IngredientMeasureWhereUniqueInput!]
	update: [IngredientMeasureUpdateWithWhereUniqueWithoutDrinkInput!]
	updateMany: [IngredientMeasureUpdateManyWithWhereWithoutDrinkInput!]
	upsert: [IngredientMeasureUpsertWithWhereUniqueWithoutDrinkInput!]
}

input IngredientMeasureUpdateManyWithoutIngredientInput {
	connect: [IngredientMeasureWhereUniqueInput!]
	connectOrCreate: [IngredientMeasureCreateOrConnectWithoutIngredientInput!]
	create: [IngredientMeasureCreateWithoutIngredientInput!]
	createMany: IngredientMeasureCreateManyIngredientInputEnvelope
	delete: [IngredientMeasureWhereUniqueInput!]
	deleteMany: [IngredientMeasureScalarWhereInput!]
	disconnect: [IngredientMeasureWhereUniqueInput!]
	set: [IngredientMeasureWhereUniqueInput!]
	update: [IngredientMeasureUpdateWithWhereUniqueWithoutIngredientInput!]
	updateMany: [IngredientMeasureUpdateManyWithWhereWithoutIngredientInput!]
	upsert: [IngredientMeasureUpsertWithWhereUniqueWithoutIngredientInput!]
}

input IngredientMeasureUpdateManyWithWhereWithoutDrinkInput {
	data: IngredientMeasureUpdateManyMutationInput!
	where: IngredientMeasureScalarWhereInput!
}

input IngredientMeasureUpdateManyWithWhereWithoutIngredientInput {
	data: IngredientMeasureUpdateManyMutationInput!
	where: IngredientMeasureScalarWhereInput!
}

input IngredientMeasureUpdateWithoutDrinkInput {
	ingredient: IngredientUpdateOneWithoutIngredientMeasureInput
	measure: NullableStringFieldUpdateOperationsInput
}

input IngredientMeasureUpdateWithoutIngredientInput {
	Drink: DrinkUpdateOneWithoutIngredientsInput
	measure: NullableStringFieldUpdateOperationsInput
}

input IngredientMeasureUpdateWithWhereUniqueWithoutDrinkInput {
	data: IngredientMeasureUpdateWithoutDrinkInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureUpdateWithWhereUniqueWithoutIngredientInput {
	data: IngredientMeasureUpdateWithoutIngredientInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureUpsertWithWhereUniqueWithoutDrinkInput {
	create: IngredientMeasureCreateWithoutDrinkInput!
	update: IngredientMeasureUpdateWithoutDrinkInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureUpsertWithWhereUniqueWithoutIngredientInput {
	create: IngredientMeasureCreateWithoutIngredientInput!
	update: IngredientMeasureUpdateWithoutIngredientInput!
	where: IngredientMeasureWhereUniqueInput!
}

input IngredientMeasureWhereInput {
	AND: [IngredientMeasureWhereInput!]
	Drink: DrinkRelationFilter
	drinkId: StringNullableFilter
	id: StringFilter
	ingredient: IngredientRelationFilter
	ingredientId: StringNullableFilter
	measure: StringNullableFilter
	NOT: [IngredientMeasureWhereInput!]
	OR: [IngredientMeasureWhereInput!]
}

input IngredientMeasureWhereUniqueInput {
	id: String
}

type IngredientMinAggregate {
	id: String
	name: String
	spiritId: String
	type: String
}

input IngredientMinOrderByAggregateInput {
	id: SortOrder
	name: SortOrder
	spiritId: SortOrder
	type: SortOrder
}

input IngredientOrderByRelationAggregateInput {
	_count: SortOrder
}

input IngredientOrderByWithAggregationInput {
	_count: IngredientCountOrderByAggregateInput
	_max: IngredientMaxOrderByAggregateInput
	_min: IngredientMinOrderByAggregateInput
	id: SortOrder
	name: SortOrder
	spiritId: SortOrder
	type: SortOrder
}

input IngredientOrderByWithRelationInput {
	id: SortOrder
	IngredientMeasure: IngredientMeasureOrderByRelationAggregateInput
	name: SortOrder
	spirit: SpiritOrderByWithRelationInput
	spiritId: SortOrder
	type: SortOrder
}

input IngredientRelationFilter {
	is: IngredientWhereInput
	isNot: IngredientWhereInput
}

enum IngredientScalarFieldEnum {
	id
	name
	spiritId
	type
}

input IngredientScalarWhereInput {
	AND: [IngredientScalarWhereInput!]
	id: StringFilter
	name: StringFilter
	NOT: [IngredientScalarWhereInput!]
	OR: [IngredientScalarWhereInput!]
	spiritId: StringNullableFilter
	type: StringFilter
}

input IngredientScalarWhereWithAggregatesInput {
	AND: [IngredientScalarWhereWithAggregatesInput!]
	id: StringWithAggregatesFilter
	name: StringWithAggregatesFilter
	NOT: [IngredientScalarWhereWithAggregatesInput!]
	OR: [IngredientScalarWhereWithAggregatesInput!]
	spiritId: StringNullableWithAggregatesFilter
	type: StringWithAggregatesFilter
}

input IngredientUpdateInput {
	IngredientMeasure: IngredientMeasureUpdateManyWithoutIngredientInput
	name: StringFieldUpdateOperationsInput
	spirit: SpiritUpdateOneWithoutIngredientInput
	type: StringFieldUpdateOperationsInput
}

input IngredientUpdateManyMutationInput {
	name: StringFieldUpdateOperationsInput
	type: StringFieldUpdateOperationsInput
}

input IngredientUpdateManyWithoutSpiritInput {
	connect: [IngredientWhereUniqueInput!]
	connectOrCreate: [IngredientCreateOrConnectWithoutSpiritInput!]
	create: [IngredientCreateWithoutSpiritInput!]
	createMany: IngredientCreateManySpiritInputEnvelope
	delete: [IngredientWhereUniqueInput!]
	deleteMany: [IngredientScalarWhereInput!]
	disconnect: [IngredientWhereUniqueInput!]
	set: [IngredientWhereUniqueInput!]
	update: [IngredientUpdateWithWhereUniqueWithoutSpiritInput!]
	updateMany: [IngredientUpdateManyWithWhereWithoutSpiritInput!]
	upsert: [IngredientUpsertWithWhereUniqueWithoutSpiritInput!]
}

input IngredientUpdateManyWithWhereWithoutSpiritInput {
	data: IngredientUpdateManyMutationInput!
	where: IngredientScalarWhereInput!
}

input IngredientUpdateOneWithoutIngredientMeasureInput {
	connect: IngredientWhereUniqueInput
	connectOrCreate: IngredientCreateOrConnectWithoutIngredientMeasureInput
	create: IngredientCreateWithoutIngredientMeasureInput
	delete: Boolean
	disconnect: Boolean
	update: IngredientUpdateWithoutIngredientMeasureInput
	upsert: IngredientUpsertWithoutIngredientMeasureInput
}

input IngredientUpdateWithoutIngredientMeasureInput {
	name: StringFieldUpdateOperationsInput
	spirit: SpiritUpdateOneWithoutIngredientInput
	type: StringFieldUpdateOperationsInput
}

input IngredientUpdateWithoutSpiritInput {
	IngredientMeasure: IngredientMeasureUpdateManyWithoutIngredientInput
	name: StringFieldUpdateOperationsInput
	type: StringFieldUpdateOperationsInput
}

input IngredientUpdateWithWhereUniqueWithoutSpiritInput {
	data: IngredientUpdateWithoutSpiritInput!
	where: IngredientWhereUniqueInput!
}

input IngredientUpsertWithoutIngredientMeasureInput {
	create: IngredientCreateWithoutIngredientMeasureInput!
	update: IngredientUpdateWithoutIngredientMeasureInput!
}

input IngredientUpsertWithWhereUniqueWithoutSpiritInput {
	create: IngredientCreateWithoutSpiritInput!
	update: IngredientUpdateWithoutSpiritInput!
	where: IngredientWhereUniqueInput!
}

input IngredientWhereInput {
	AND: [IngredientWhereInput!]
	id: StringFilter
	IngredientMeasure: IngredientMeasureListRelationFilter
	name: StringFilter
	NOT: [IngredientWhereInput!]
	OR: [IngredientWhereInput!]
	spirit: SpiritRelationFilter
	spiritId: StringNullableFilter
	type: StringFilter
}

input IngredientWhereUniqueInput {
	id: String
}

type Mutation {
	createDrink(data: DrinkCreateInput!): Drink!
	createIngredient(data: IngredientCreateInput!): Ingredient!
	createIngredientMeasure(data: IngredientMeasureCreateInput!): IngredientMeasure!
	createManyDrink(data: [DrinkCreateManyInput!]!): AffectedRowsOutput!
	createManyIngredient(data: [IngredientCreateManyInput!]!): AffectedRowsOutput!
	createManyIngredientMeasure(data: [IngredientMeasureCreateManyInput!]!): AffectedRowsOutput!
	createManySpirit(data: [SpiritCreateManyInput!]!): AffectedRowsOutput!
	createSpirit(data: SpiritCreateInput!): Spirit!
	deleteDrink(where: DrinkWhereUniqueInput!): Drink
	deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
	deleteIngredientMeasure(where: IngredientMeasureWhereUniqueInput!): IngredientMeasure
	deleteManyDrink(where: DrinkWhereInput): AffectedRowsOutput!
	deleteManyIngredient(where: IngredientWhereInput): AffectedRowsOutput!
	deleteManyIngredientMeasure(where: IngredientMeasureWhereInput): AffectedRowsOutput!
	deleteManySpirit(where: SpiritWhereInput): AffectedRowsOutput!
	deleteSpirit(where: SpiritWhereUniqueInput!): Spirit
	updateDrink(data: DrinkUpdateInput!, where: DrinkWhereUniqueInput!): Drink
	updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
	updateIngredientMeasure(
		data: IngredientMeasureUpdateInput!
		where: IngredientMeasureWhereUniqueInput!
	): IngredientMeasure
	updateManyDrink(data: DrinkUpdateManyMutationInput!, where: DrinkWhereInput): AffectedRowsOutput!
	updateManyIngredient(
		data: IngredientUpdateManyMutationInput!
		where: IngredientWhereInput
	): AffectedRowsOutput!
	updateManyIngredientMeasure(
		data: IngredientMeasureUpdateManyMutationInput!
		where: IngredientMeasureWhereInput
	): AffectedRowsOutput!
	updateManySpirit(
		data: SpiritUpdateManyMutationInput!
		where: SpiritWhereInput
	): AffectedRowsOutput!
	updateSpirit(data: SpiritUpdateInput!, where: SpiritWhereUniqueInput!): Spirit
	upsertDrink(
		create: DrinkCreateInput!
		update: DrinkUpdateInput!
		where: DrinkWhereUniqueInput!
	): Drink!
	upsertIngredient(
		create: IngredientCreateInput!
		update: IngredientUpdateInput!
		where: IngredientWhereUniqueInput!
	): Ingredient!
	upsertIngredientMeasure(
		create: IngredientMeasureCreateInput!
		update: IngredientMeasureUpdateInput!
		where: IngredientMeasureWhereUniqueInput!
	): IngredientMeasure!
	upsertSpirit(
		create: SpiritCreateInput!
		update: SpiritUpdateInput!
		where: SpiritWhereUniqueInput!
	): Spirit!
}

input NestedDateTimeFilter {
	equals: DateTime
	gt: DateTime
	gte: DateTime
	in: [DateTime!]
	lt: DateTime
	lte: DateTime
	not: NestedDateTimeFilter
	notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedDateTimeFilter
	_min: NestedDateTimeFilter
	equals: DateTime
	gt: DateTime
	gte: DateTime
	in: [DateTime!]
	lt: DateTime
	lte: DateTime
	not: NestedDateTimeWithAggregatesFilter
	notIn: [DateTime!]
}

input NestedEnumSpiritTypeFilter {
	equals: SpiritType
	in: [SpiritType!]
	not: NestedEnumSpiritTypeFilter
	notIn: [SpiritType!]
}

input NestedEnumSpiritTypeWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedEnumSpiritTypeFilter
	_min: NestedEnumSpiritTypeFilter
	equals: SpiritType
	in: [SpiritType!]
	not: NestedEnumSpiritTypeWithAggregatesFilter
	notIn: [SpiritType!]
}

input NestedFloatFilter {
	equals: Float
	gt: Float
	gte: Float
	in: [Float!]
	lt: Float
	lte: Float
	not: NestedFloatFilter
	notIn: [Float!]
}

input NestedFloatWithAggregatesFilter {
	_avg: NestedFloatFilter
	_count: NestedIntFilter
	_max: NestedFloatFilter
	_min: NestedFloatFilter
	_sum: NestedFloatFilter
	equals: Float
	gt: Float
	gte: Float
	in: [Float!]
	lt: Float
	lte: Float
	not: NestedFloatWithAggregatesFilter
	notIn: [Float!]
}

input NestedIntFilter {
	equals: Int
	gt: Int
	gte: Int
	in: [Int!]
	lt: Int
	lte: Int
	not: NestedIntFilter
	notIn: [Int!]
}

input NestedIntNullableFilter {
	equals: Int
	gt: Int
	gte: Int
	in: [Int!]
	isSet: Boolean
	lt: Int
	lte: Int
	not: NestedIntNullableFilter
	notIn: [Int!]
}

input NestedStringFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringFilter
	notIn: [String!]
	startsWith: String
}

input NestedStringNullableFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	isSet: Boolean
	lt: String
	lte: String
	not: NestedStringNullableFilter
	notIn: [String!]
	startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
	_count: NestedIntNullableFilter
	_max: NestedStringNullableFilter
	_min: NestedStringNullableFilter
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	isSet: Boolean
	lt: String
	lte: String
	not: NestedStringNullableWithAggregatesFilter
	notIn: [String!]
	startsWith: String
}

input NestedStringWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedStringFilter
	_min: NestedStringFilter
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	not: NestedStringWithAggregatesFilter
	notIn: [String!]
	startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
	set: String
	unset: Boolean
}

type Query {
	aggregateDrink(
		cursor: DrinkWhereUniqueInput
		orderBy: [DrinkOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: DrinkWhereInput
	): AggregateDrink!
	aggregateIngredient(
		cursor: IngredientWhereUniqueInput
		orderBy: [IngredientOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientWhereInput
	): AggregateIngredient!
	aggregateIngredientMeasure(
		cursor: IngredientMeasureWhereUniqueInput
		orderBy: [IngredientMeasureOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): AggregateIngredientMeasure!
	aggregateSpirit(
		cursor: SpiritWhereUniqueInput
		orderBy: [SpiritOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: SpiritWhereInput
	): AggregateSpirit!
	drink(where: DrinkWhereUniqueInput!): Drink
	drinks(
		cursor: DrinkWhereUniqueInput
		distinct: [DrinkScalarFieldEnum!]
		orderBy: [DrinkOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: DrinkWhereInput
	): [Drink!]!
	findFirstDrink(
		cursor: DrinkWhereUniqueInput
		distinct: [DrinkScalarFieldEnum!]
		orderBy: [DrinkOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: DrinkWhereInput
	): Drink
	findFirstIngredient(
		cursor: IngredientWhereUniqueInput
		distinct: [IngredientScalarFieldEnum!]
		orderBy: [IngredientOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientWhereInput
	): Ingredient
	findFirstIngredientMeasure(
		cursor: IngredientMeasureWhereUniqueInput
		distinct: [IngredientMeasureScalarFieldEnum!]
		orderBy: [IngredientMeasureOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): IngredientMeasure
	findFirstSpirit(
		cursor: SpiritWhereUniqueInput
		distinct: [SpiritScalarFieldEnum!]
		orderBy: [SpiritOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: SpiritWhereInput
	): Spirit
	groupByDrink(
		by: [DrinkScalarFieldEnum!]!
		having: DrinkScalarWhereWithAggregatesInput
		orderBy: [DrinkOrderByWithAggregationInput!]
		skip: Int
		take: Int
		where: DrinkWhereInput
	): [DrinkGroupBy!]!
	groupByIngredient(
		by: [IngredientScalarFieldEnum!]!
		having: IngredientScalarWhereWithAggregatesInput
		orderBy: [IngredientOrderByWithAggregationInput!]
		skip: Int
		take: Int
		where: IngredientWhereInput
	): [IngredientGroupBy!]!
	groupByIngredientMeasure(
		by: [IngredientMeasureScalarFieldEnum!]!
		having: IngredientMeasureScalarWhereWithAggregatesInput
		orderBy: [IngredientMeasureOrderByWithAggregationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): [IngredientMeasureGroupBy!]!
	groupBySpirit(
		by: [SpiritScalarFieldEnum!]!
		having: SpiritScalarWhereWithAggregatesInput
		orderBy: [SpiritOrderByWithAggregationInput!]
		skip: Int
		take: Int
		where: SpiritWhereInput
	): [SpiritGroupBy!]!
	ingredient(where: IngredientWhereUniqueInput!): Ingredient
	ingredientMeasure(where: IngredientMeasureWhereUniqueInput!): IngredientMeasure
	ingredientMeasures(
		cursor: IngredientMeasureWhereUniqueInput
		distinct: [IngredientMeasureScalarFieldEnum!]
		orderBy: [IngredientMeasureOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientMeasureWhereInput
	): [IngredientMeasure!]!
	ingredients(
		cursor: IngredientWhereUniqueInput
		distinct: [IngredientScalarFieldEnum!]
		orderBy: [IngredientOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientWhereInput
	): [Ingredient!]!
	spirit(where: SpiritWhereUniqueInput!): Spirit
	spirits(
		cursor: SpiritWhereUniqueInput
		distinct: [SpiritScalarFieldEnum!]
		orderBy: [SpiritOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: SpiritWhereInput
	): [Spirit!]!
}

enum QueryMode {
	default
	insensitive
}

enum SortOrder {
	asc
	desc
}

type Spirit {
	_count: SpiritCount
	alcoholContent: Float!
	classification: SpiritClassification!
	description: SpiritDescription!
	id: String!
	Ingredient(
		cursor: IngredientWhereUniqueInput
		distinct: [IngredientScalarFieldEnum!]
		orderBy: [IngredientOrderByWithRelationInput!]
		skip: Int
		take: Int
		where: IngredientWhereInput
	): [Ingredient!]!
	ingredients: String!
	name: String!
	nameLong: String!
	sugar: String!
	type: SpiritType!
	volume: Float!
	volumeType: String
}

type SpiritAvgAggregate {
	alcoholContent: Float
	volume: Float
}

input SpiritAvgOrderByAggregateInput {
	alcoholContent: SortOrder
	volume: SortOrder
}

type SpiritClassification {
	mainProductType: String!
	productType: String!
	subProductType: String!
}

input SpiritClassificationCompositeFilter {
	equals: SpiritClassificationObjectEqualityInput
	is: SpiritClassificationWhereInput
	isNot: SpiritClassificationWhereInput
}

input SpiritClassificationCreateEnvelopeInput {
	set: SpiritClassificationCreateInput
}

input SpiritClassificationCreateInput {
	mainProductType: String!
	productType: String!
	subProductType: String!
}

input SpiritClassificationObjectEqualityInput {
	mainProductType: String!
	productType: String!
	subProductType: String!
}

input SpiritClassificationOrderByInput {
	mainProductType: SortOrder
	productType: SortOrder
	subProductType: SortOrder
}

input SpiritClassificationUpdateEnvelopeInput {
	set: SpiritClassificationCreateInput
	update: SpiritClassificationUpdateInput
}

input SpiritClassificationUpdateInput {
	mainProductType: StringFieldUpdateOperationsInput
	productType: StringFieldUpdateOperationsInput
	subProductType: StringFieldUpdateOperationsInput
}

input SpiritClassificationWhereInput {
	AND: [SpiritClassificationWhereInput!]
	mainProductType: StringFilter
	NOT: [SpiritClassificationWhereInput!]
	OR: [SpiritClassificationWhereInput!]
	productType: StringFilter
	subProductType: StringFilter
}

type SpiritCount {
	Ingredient: Int!
}

type SpiritCountAggregate {
	_all: Int!
	alcoholContent: Int!
	id: Int!
	ingredients: Int!
	name: Int!
	nameLong: Int!
	sugar: Int!
	type: Int!
	volume: Int!
	volumeType: Int!
}

input SpiritCountOrderByAggregateInput {
	alcoholContent: SortOrder
	id: SortOrder
	ingredients: SortOrder
	name: SortOrder
	nameLong: SortOrder
	sugar: SortOrder
	type: SortOrder
	volume: SortOrder
	volumeType: SortOrder
}

input SpiritCreateInput {
	alcoholContent: Float!
	classification: SpiritClassificationCreateEnvelopeInput!
	description: SpiritDescriptionCreateEnvelopeInput!
	id: String
	Ingredient: IngredientCreateNestedManyWithoutSpiritInput
	ingredients: String!
	name: String!
	nameLong: String!
	sugar: String!
	type: SpiritType!
	volume: Float!
	volumeType: String
}

input SpiritCreateManyInput {
	alcoholContent: Float!
	classification: SpiritClassificationCreateEnvelopeInput!
	description: SpiritDescriptionCreateEnvelopeInput!
	id: String
	ingredients: String!
	name: String!
	nameLong: String!
	sugar: String!
	type: SpiritType!
	volume: Float!
	volumeType: String
}

input SpiritCreateNestedOneWithoutIngredientInput {
	connect: SpiritWhereUniqueInput
	connectOrCreate: SpiritCreateOrConnectWithoutIngredientInput
	create: SpiritCreateWithoutIngredientInput
}

input SpiritCreateOrConnectWithoutIngredientInput {
	create: SpiritCreateWithoutIngredientInput!
	where: SpiritWhereUniqueInput!
}

input SpiritCreateWithoutIngredientInput {
	alcoholContent: Float!
	classification: SpiritClassificationCreateEnvelopeInput!
	description: SpiritDescriptionCreateEnvelopeInput!
	id: String
	ingredients: String!
	name: String!
	nameLong: String!
	sugar: String!
	type: SpiritType!
	volume: Float!
	volumeType: String
}

type SpiritDescription {
	colour: String!
	odour: String!
	taste: String!
}

input SpiritDescriptionCompositeFilter {
	equals: SpiritDescriptionObjectEqualityInput
	is: SpiritDescriptionWhereInput
	isNot: SpiritDescriptionWhereInput
}

input SpiritDescriptionCreateEnvelopeInput {
	set: SpiritDescriptionCreateInput
}

input SpiritDescriptionCreateInput {
	colour: String!
	odour: String!
	taste: String!
}

input SpiritDescriptionObjectEqualityInput {
	colour: String!
	odour: String!
	taste: String!
}

input SpiritDescriptionOrderByInput {
	colour: SortOrder
	odour: SortOrder
	taste: SortOrder
}

input SpiritDescriptionUpdateEnvelopeInput {
	set: SpiritDescriptionCreateInput
	update: SpiritDescriptionUpdateInput
}

input SpiritDescriptionUpdateInput {
	colour: StringFieldUpdateOperationsInput
	odour: StringFieldUpdateOperationsInput
	taste: StringFieldUpdateOperationsInput
}

input SpiritDescriptionWhereInput {
	AND: [SpiritDescriptionWhereInput!]
	colour: StringFilter
	NOT: [SpiritDescriptionWhereInput!]
	odour: StringFilter
	OR: [SpiritDescriptionWhereInput!]
	taste: StringFilter
}

type SpiritGroupBy {
	_avg: SpiritAvgAggregate
	_count: SpiritCountAggregate
	_max: SpiritMaxAggregate
	_min: SpiritMinAggregate
	_sum: SpiritSumAggregate
	alcoholContent: Float!
	id: String!
	ingredients: String!
	name: String!
	nameLong: String!
	sugar: String!
	type: SpiritType!
	volume: Float!
	volumeType: String
}

type SpiritMaxAggregate {
	alcoholContent: Float
	id: String
	ingredients: String
	name: String
	nameLong: String
	sugar: String
	type: SpiritType
	volume: Float
	volumeType: String
}

input SpiritMaxOrderByAggregateInput {
	alcoholContent: SortOrder
	id: SortOrder
	ingredients: SortOrder
	name: SortOrder
	nameLong: SortOrder
	sugar: SortOrder
	type: SortOrder
	volume: SortOrder
	volumeType: SortOrder
}

type SpiritMinAggregate {
	alcoholContent: Float
	id: String
	ingredients: String
	name: String
	nameLong: String
	sugar: String
	type: SpiritType
	volume: Float
	volumeType: String
}

input SpiritMinOrderByAggregateInput {
	alcoholContent: SortOrder
	id: SortOrder
	ingredients: SortOrder
	name: SortOrder
	nameLong: SortOrder
	sugar: SortOrder
	type: SortOrder
	volume: SortOrder
	volumeType: SortOrder
}

input SpiritOrderByWithAggregationInput {
	_avg: SpiritAvgOrderByAggregateInput
	_count: SpiritCountOrderByAggregateInput
	_max: SpiritMaxOrderByAggregateInput
	_min: SpiritMinOrderByAggregateInput
	_sum: SpiritSumOrderByAggregateInput
	alcoholContent: SortOrder
	id: SortOrder
	ingredients: SortOrder
	name: SortOrder
	nameLong: SortOrder
	sugar: SortOrder
	type: SortOrder
	volume: SortOrder
	volumeType: SortOrder
}

input SpiritOrderByWithRelationInput {
	alcoholContent: SortOrder
	classification: SpiritClassificationOrderByInput
	description: SpiritDescriptionOrderByInput
	id: SortOrder
	Ingredient: IngredientOrderByRelationAggregateInput
	ingredients: SortOrder
	name: SortOrder
	nameLong: SortOrder
	sugar: SortOrder
	type: SortOrder
	volume: SortOrder
	volumeType: SortOrder
}

input SpiritRelationFilter {
	is: SpiritWhereInput
	isNot: SpiritWhereInput
}

enum SpiritScalarFieldEnum {
	alcoholContent
	id
	ingredients
	name
	nameLong
	sugar
	type
	volume
	volumeType
}

input SpiritScalarWhereWithAggregatesInput {
	alcoholContent: FloatWithAggregatesFilter
	AND: [SpiritScalarWhereWithAggregatesInput!]
	id: StringWithAggregatesFilter
	ingredients: StringWithAggregatesFilter
	name: StringWithAggregatesFilter
	nameLong: StringWithAggregatesFilter
	NOT: [SpiritScalarWhereWithAggregatesInput!]
	OR: [SpiritScalarWhereWithAggregatesInput!]
	sugar: StringWithAggregatesFilter
	type: EnumSpiritTypeWithAggregatesFilter
	volume: FloatWithAggregatesFilter
	volumeType: StringNullableWithAggregatesFilter
}

type SpiritSumAggregate {
	alcoholContent: Float
	volume: Float
}

input SpiritSumOrderByAggregateInput {
	alcoholContent: SortOrder
	volume: SortOrder
}

enum SpiritType {
	BEER
	SPIRIT
	WINE
}

input SpiritUpdateInput {
	alcoholContent: FloatFieldUpdateOperationsInput
	classification: SpiritClassificationUpdateEnvelopeInput
	description: SpiritDescriptionUpdateEnvelopeInput
	Ingredient: IngredientUpdateManyWithoutSpiritInput
	ingredients: StringFieldUpdateOperationsInput
	name: StringFieldUpdateOperationsInput
	nameLong: StringFieldUpdateOperationsInput
	sugar: StringFieldUpdateOperationsInput
	type: EnumSpiritTypeFieldUpdateOperationsInput
	volume: FloatFieldUpdateOperationsInput
	volumeType: NullableStringFieldUpdateOperationsInput
}

input SpiritUpdateManyMutationInput {
	alcoholContent: FloatFieldUpdateOperationsInput
	classification: SpiritClassificationUpdateEnvelopeInput
	description: SpiritDescriptionUpdateEnvelopeInput
	ingredients: StringFieldUpdateOperationsInput
	name: StringFieldUpdateOperationsInput
	nameLong: StringFieldUpdateOperationsInput
	sugar: StringFieldUpdateOperationsInput
	type: EnumSpiritTypeFieldUpdateOperationsInput
	volume: FloatFieldUpdateOperationsInput
	volumeType: NullableStringFieldUpdateOperationsInput
}

input SpiritUpdateOneWithoutIngredientInput {
	connect: SpiritWhereUniqueInput
	connectOrCreate: SpiritCreateOrConnectWithoutIngredientInput
	create: SpiritCreateWithoutIngredientInput
	delete: Boolean
	disconnect: Boolean
	update: SpiritUpdateWithoutIngredientInput
	upsert: SpiritUpsertWithoutIngredientInput
}

input SpiritUpdateWithoutIngredientInput {
	alcoholContent: FloatFieldUpdateOperationsInput
	classification: SpiritClassificationUpdateEnvelopeInput
	description: SpiritDescriptionUpdateEnvelopeInput
	ingredients: StringFieldUpdateOperationsInput
	name: StringFieldUpdateOperationsInput
	nameLong: StringFieldUpdateOperationsInput
	sugar: StringFieldUpdateOperationsInput
	type: EnumSpiritTypeFieldUpdateOperationsInput
	volume: FloatFieldUpdateOperationsInput
	volumeType: NullableStringFieldUpdateOperationsInput
}

input SpiritUpsertWithoutIngredientInput {
	create: SpiritCreateWithoutIngredientInput!
	update: SpiritUpdateWithoutIngredientInput!
}

input SpiritWhereInput {
	alcoholContent: FloatFilter
	AND: [SpiritWhereInput!]
	classification: SpiritClassificationCompositeFilter
	description: SpiritDescriptionCompositeFilter
	id: StringFilter
	Ingredient: IngredientListRelationFilter
	ingredients: StringFilter
	name: StringFilter
	nameLong: StringFilter
	NOT: [SpiritWhereInput!]
	OR: [SpiritWhereInput!]
	sugar: StringFilter
	type: EnumSpiritTypeFilter
	volume: FloatFilter
	volumeType: StringNullableFilter
}

input SpiritWhereUniqueInput {
	id: String
}

input StringFieldUpdateOperationsInput {
	set: String
}

input StringFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	mode: QueryMode
	not: NestedStringFilter
	notIn: [String!]
	startsWith: String
}

input StringNullableFilter {
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	isSet: Boolean
	lt: String
	lte: String
	mode: QueryMode
	not: NestedStringNullableFilter
	notIn: [String!]
	startsWith: String
}

input StringNullableListFilter {
	equals: [String!]
	has: String
	hasEvery: [String!]
	hasSome: [String!]
	isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
	_count: NestedIntNullableFilter
	_max: NestedStringNullableFilter
	_min: NestedStringNullableFilter
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	isSet: Boolean
	lt: String
	lte: String
	mode: QueryMode
	not: NestedStringNullableWithAggregatesFilter
	notIn: [String!]
	startsWith: String
}

input StringWithAggregatesFilter {
	_count: NestedIntFilter
	_max: NestedStringFilter
	_min: NestedStringFilter
	contains: String
	endsWith: String
	equals: String
	gt: String
	gte: String
	in: [String!]
	lt: String
	lte: String
	mode: QueryMode
	not: NestedStringWithAggregatesFilter
	notIn: [String!]
	startsWith: String
}
